#pragma kernel MeshOverlapSphere
#pragma kernel MeshIntersectRay

struct Vertex
{
	float3 position;
	float3 normal;
};
struct RayOutput
{
	float3 position;
	float3 normal;
};

float3 spherePos;
float sphereRadius;
float3 rayOrigin;
float3 rayDirection;
StructuredBuffer<Vertex> vertexBuffer;
StructuredBuffer<uint> indexBuffer;
RWStructuredBuffer<int> countBuffer;
AppendStructuredBuffer<RayOutput> rayOutputBuffer;


// Helper function to find the closest point on a line segment
float3 ClosestPointOnLineSegment(float3 A, float3 B, float3 Point)
{
	float3 AB = B - A;
	float t = dot(Point - A, AB) / dot(AB, AB);
	return A + saturate(t) * AB;
}

bool SphereTriangleIntersection(
    float3 p0, float3 p1, float3 p2, // triangle vertices
    float3 sphereCenter, float radius, // sphere position and radius
    out float3 closestPoint)
{
    float3 N = normalize(cross(p1 - p0, p2 - p0)); // plane normal
    float dist = dot(sphereCenter - p0, N); // signed distance between sphere and plane

    if (dist < -radius || dist > radius)
    {
        closestPoint = float3(0, 0, 0);
        return false; // no intersection
    }

    float3 point0 = sphereCenter - N * dist; // projected sphere center on triangle plane

    // Check if point0 is inside all triangle edges:
    float3 c0 = cross(point0 - p0, p1 - p0);
    float3 c1 = cross(point0 - p1, p2 - p1);
    float3 c2 = cross(point0 - p2, p0 - p2);
    bool inside = dot(c0, N) <= 0 && dot(c1, N) <= 0 && dot(c2, N) <= 0;

    if (inside)
    {
        closestPoint = point0;
        return true;
    }

    float radiussq = radius * radius; // sphere radius squared

    // Find the closest point on each edge and check for intersection with the sphere
    float3 point1 = ClosestPointOnLineSegment(p0, p1, sphereCenter);
    float3 v1 = sphereCenter - point1;
    float distsq1 = dot(v1, v1);
    bool intersects = distsq1 < radiussq;

    float3 point2 = ClosestPointOnLineSegment(p1, p2, sphereCenter);
    float3 v2 = sphereCenter - point2;
    float distsq2 = dot(v2, v2);
	intersects = intersects || (distsq2 < radiussq);

    float3 point3 = ClosestPointOnLineSegment(p2, p0, sphereCenter);
    float3 v3 = sphereCenter - point3;
    float distsq3 = dot(v3, v3);
	intersects = intersects || (distsq3 < radiussq);

    // Find the closest point among point1, point2, and point3
    if (distsq1 < distsq2 && distsq1 < distsq3)
    {
        closestPoint = point1;
    }
    else if (distsq2 < distsq3)
    {
        closestPoint = point2;
    }
    else
    {
        closestPoint = point3;
    }

    return intersects;
}


[numthreads(512,1,1)]
void MeshOverlapSphere (uint id : SV_DispatchThreadID)
{
	float3 pos0 = vertexBuffer[indexBuffer[id * 3 + 0]].position;
	float3 pos1 = vertexBuffer[indexBuffer[id * 3 + 1]].position;
	float3 pos2 = vertexBuffer[indexBuffer[id * 3 + 2]].position;
	float3 closestPoint;
	if(SphereTriangleIntersection(pos0, pos1, pos2, spherePos, sphereRadius, closestPoint))
	{
		InterlockedAdd(countBuffer[0], 1);
		float3 normal = normalize(cross(pos1 - pos0, pos2 - pos0)); //triangle normal
		RayOutput output;
		output.position = closestPoint;
		output.normal = normal;
		rayOutputBuffer.Append(output);
	}
}


bool RayTriangleIntersect(float3 V0, float3 V1, float3 V2, out float Distance)
{
	float3 E1 = V1 - V0;
	float3 E2 = V2 - V0;
	float3 P = cross(rayDirection, E2);
	float Det = dot(E1, P);
	
	if (Det > -0.000001f && Det < 0.000001f)
		return false;
	
	float3 T = rayOrigin - V0;
	float U = dot(T, P) / Det;
	
	if (U < 0.0f || U > 1.0f)
		return false;
	
	float3 Q = cross(T, E1);
	float V = dot(rayDirection, Q) / Det;
	
	if (V < 0.0f || U + V > 1.0f)
		return false;
	
	Distance = dot(E2, Q) / Det;
	return true;
}

[numthreads(512,1,1)]
void MeshIntersectRay (uint id : SV_DispatchThreadID)
{
	float3 pos0 = vertexBuffer[indexBuffer[id * 3 + 0]].position;
	float3 pos1 = vertexBuffer[indexBuffer[id * 3 + 1]].position;
	float3 pos2 = vertexBuffer[indexBuffer[id * 3 + 2]].position;

	float t;
	if(RayTriangleIntersect(pos0, pos1, pos2, t))
	{
		InterlockedAdd(countBuffer[0], 1);
		float3 normal = normalize(cross(pos1 - pos0, pos2 - pos0)); //triangle normal
		
		RayOutput rayOutput;
		rayOutput.position = rayOrigin + rayDirection * t;
		rayOutput.normal = normal;
		
		rayOutputBuffer.Append(rayOutput);
	}
}
