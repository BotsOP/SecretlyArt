#pragma kernel FloodSDF
#pragma kernel ClearSDF
#pragma kernel CombineTexturesCube
#pragma kernel UpdateCombinedSDF

Texture3D<float> noiseTex;

RWTexture3D<float4> vectorField;
RWStructuredBuffer<int> counter;
ConsumeStructuredBuffer<int3> consumePoints;
AppendStructuredBuffer<int3> appendPoints;
int amountPoints;
float isoLevel;
int chunkSize;
float3 playerPos;

groupshared int3 cachedStartPos[32][26];

[numthreads(32,26,1)]
void FloodSDF (uint3 localId : SV_GroupThreadID)
{
	const int3 dirs[26] =
	{
		int3(-1, -1, -1),
		int3(0, -1, -1),
		int3(1, -1, -1),
		int3(-1, -1, 0),
		int3(0, -1, 0),
		int3(1, -1, 0),
		int3(-1, -1, 1),
		int3(0, -1, 1),
		int3(1, -1, 1),
	
		int3(-1, 0, -1),
		int3(0, 0, -1),
		int3(1, 0, -1),
		int3(-1, 0, 0),
		int3(1, 0, 0),
		int3(-1, 0, 1),
		int3(0, 0, 1),
		int3(1, 0, 1),
	
		int3(-1, 1, -1),
		int3(0, 1, -1),
		int3(1, 1, -1),
		int3(-1, 1, 0),
		int3(0, 1, 0),
		int3(1, 1, 0),
		int3(-1, 1, 1),
		int3(0, 1, 1),
		int3(1, 1, 1),
	};

	if(localId.y == 0)
	{
		cachedStartPos[localId.x][localId.y] = consumePoints.Consume();
	}
	
	GroupMemoryBarrierWithGroupSync();

	// if(vectorField[cachedStartPos[localId.x][0]].w > 0)
	// {
	// 	return;
	// }
	
	int3 dir = dirs[localId.y];

	int3 currentPos = cachedStartPos[localId.x][0] + dir;

	if(
	noiseTex[currentPos] < isoLevel + 0.1 ||
	//noiseTex[currentPos] >= 1 ||
	vectorField[currentPos].w > 0.5 ||
	currentPos.x == -1 || currentPos.y == -1 || currentPos.z == -1 ||
	currentPos.x == chunkSize || currentPos.y == chunkSize || currentPos.z == chunkSize)
	{
		return;
	}
	
	InterlockedAdd(counter[0], 1);
	vectorField[currentPos] = float4(-dir, 1);
	appendPoints.Append(currentPos);
}

[numthreads(8,8,8)]
void ClearSDF (uint3 id : SV_DispatchThreadID)
{
	float3 dirAwayPlayer = normalize(id - playerPos);
	vectorField[id] = float4(dirAwayPlayer, 0);
}

Texture3D<float> noiseTexBottomLeftBack;
Texture3D<float> noiseTexBottomMiddleBack;
Texture3D<float> noiseTexBottomRightBack;
Texture3D<float> noiseTexBottomLeftMiddle;
Texture3D<float> noiseTexBottomMiddleMiddle;
Texture3D<float> noiseTexBottomRightMiddle;
Texture3D<float> noiseTexBottomLeftForward;
Texture3D<float> noiseTexBottomMiddleForward;
Texture3D<float> noiseTexBottomRightForward;

Texture3D<float> noiseTexMiddleLeftBack;
Texture3D<float> noiseTexMiddleMiddleBack;
Texture3D<float> noiseTexMiddleRightBack;
Texture3D<float> noiseTexMiddleLeftMiddle;
Texture3D<float> noiseTexMiddleRightMiddle;
Texture3D<float> noiseTexMiddleLeftForward;
Texture3D<float> noiseTexMiddleMiddleForward;
Texture3D<float> noiseTexMiddleRightForward;

Texture3D<float> noiseTexTopLeftBack;
Texture3D<float> noiseTexTopMiddleBack;
Texture3D<float> noiseTexTopRightBack;
Texture3D<float> noiseTexTopLeftMiddle;
Texture3D<float> noiseTexTopMiddleMiddle;
Texture3D<float> noiseTexTopRightMiddle;
Texture3D<float> noiseTexTopLeftForward;
Texture3D<float> noiseTexTopMiddleForward;
Texture3D<float> noiseTexTopRightForward;

RWTexture3D<float> combinedNoiseTex;

[numthreads(8,8,8)]
void CombineTexturesCube (uint3 id : SV_DispatchThreadID)
{
	int x = id.x / 32;
	int y = (id.y / 32) * 9;
	int z = (id.z / 32) * 3;
	int index = x + y + z;
	uint3 localPos = uint3(id.x % 32, id.y % 32, id.z % 32);
	
	if(index == 0)
	{
		combinedNoiseTex[id] = noiseTexMiddleLeftBack[localPos];
		return;
	}
	if(index == 1)
	{
		combinedNoiseTex[id] = noiseTexMiddleMiddleBack[localPos];
		return;
	}
	if(index == 2)
	{
		combinedNoiseTex[id] = noiseTexMiddleRightBack[localPos];
		return;
	}
	if(index == 3)
	{
		combinedNoiseTex[id] = noiseTexMiddleLeftMiddle[localPos];
		return;
	}
	if(index == 4)
	{
		combinedNoiseTex[id] = noiseTex[localPos];
		return;
	}
	if(index == 5)
	{
		combinedNoiseTex[id] = noiseTexMiddleRightMiddle[localPos];
		return;
	}
	if(index == 6)
	{
		combinedNoiseTex[id] = noiseTexMiddleLeftForward[localPos];
		return;
	}
	if(index == 7)
	{
		combinedNoiseTex[id] = noiseTexMiddleMiddleForward[localPos];
		return;
	}
	if(index == 8)
	{
		combinedNoiseTex[id] = noiseTexMiddleRightForward[localPos];
		return;
	}
	
	if(index == 9)
	{
		combinedNoiseTex[id] = noiseTexTopLeftBack[localPos];
		return;
	}
	if(index == 10)
	{
		combinedNoiseTex[id] = noiseTexTopMiddleBack[localPos];
		return;
	}
	if(index == 11)
	{
		combinedNoiseTex[id] = noiseTexTopRightBack[localPos];
		return;
	}
	if(index == 12)
	{
		combinedNoiseTex[id] = noiseTexTopLeftMiddle[localPos];
		return;
	}
	if(index == 13)
	{
		combinedNoiseTex[id] = noiseTexTopMiddleMiddle[localPos];
		return;
	}
	if(index == 14)
	{
		combinedNoiseTex[id] = noiseTexTopRightMiddle[localPos];
		return;
	}
	if(index == 15)
	{
		combinedNoiseTex[id] = noiseTexTopLeftForward[localPos];
		return;
	}
	if(index == 16)
	{
		combinedNoiseTex[id] = noiseTexTopMiddleForward[localPos];
		return;
	}
	if(index == 17)
	{
		combinedNoiseTex[id] = noiseTexTopRightForward[localPos];
	}
}

float3 startPosNoiseTex;
float3 startPosCombinedTex;

[numthreads(8,8,8)]
void UpdateCombinedSDF (uint3 id : SV_DispatchThreadID)
{
	uint3 noiseTexPos = id + startPosNoiseTex;
	uint3 combinedTexPos = id + startPosCombinedTex;
	combinedNoiseTex[combinedTexPos] = noiseTex[noiseTexPos];
}
